<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>BUUCTF crypto 1</title>
      <link href="/ctf-crypto-buuctf-1/"/>
      <url>/ctf-crypto-buuctf-1/</url>
      
        <content type="html"><![CDATA[<p>感覺CTF題目寫過就忘記，真的要把題解好好寫下來，之後要用到的時候直接查詢就好。<br>記憶力有點靠不住了，然後這邊只會提供做法，盡量不提供flag，不好意思。</p><h2 id="BUUCTF"><a href="#BUUCTF" class="headerlink" title="BUUCTF"></a>BUUCTF</h2><p>因為感覺比較油一點就來試試看。</p><h3 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h3><p>這題給出e00cf25ad42683b3df678c61f42c6bda這個字串，依據題目來看就是MD5解密。</p><blockquote><p>MD5訊息摘要演算法（MD5 Message-Digest Algorithm），是一種被廣泛使用的密碼雜湊函式，可以產生出一個128位元（16個字元(BYTES)）的雜湊值（hash value），用於確保資訊傳輸完整一致，由美國密碼學家羅納德·李維斯特（Ronald Linn Rivest）設計。</p></blockquote><p>網站提供的是與資料庫內的數據進行比較並解密，畢竟不可能從hash中直接獲得明文。</p><p><a href="https://md5decrypt.net/en/">https://md5decrypt.net/en/</a></p><p>輸入後即可取得flag。</p><h3 id="一眼就解密"><a href="#一眼就解密" class="headerlink" title="一眼就解密"></a>一眼就解密</h3><p>題目給出的加密字串是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ZmxhZ3tUSEVfRkxBR19PRl9USElTX1NUUklOR30=</span><br></pre></td></tr></table></figure><p>看到字尾有&#x3D;可以先盲猜是base64，熟到不能再熟了。<br>decode base64 to ascii編碼之後，得到flag。</p><h3 id="Url編碼"><a href="#Url編碼" class="headerlink" title="Url編碼"></a>Url編碼</h3><p>既然提示出是url編碼了，就找一個解url編碼的網站。</p><p><a href="https://www.ifreesite.com/urldecoderencoder.htm">https://www.ifreesite.com/urldecoderencoder.htm</a></p><p>解碼後取得flag。</p><h3 id="看我迴旋踢"><a href="#看我迴旋踢" class="headerlink" title="看我迴旋踢"></a>看我迴旋踢</h3><p>題目給出的加密字串是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">synt&#123;5pq1004q-86n5-46q8-o720-oro5on0417r1&#125;</span><br></pre></td></tr></table></figure><p>感覺沒什麼特別的地方，也不是hex等字串的感覺，先盲猜ROT13，然後發現解密出的字串格式是flag{….}，確定取得flag。</p><h3 id="摩絲"><a href="#摩絲" class="headerlink" title="摩絲"></a>摩絲</h3><p>厲害了，直接打開維基百科查詢，對密碼對到眼睛瞎掉。<br>不過比較好的是密碼中間有用空格隔開，不然真的很噁。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.. .-.. --- ...- . -.-- --- ..-</span><br></pre></td></tr></table></figure><p>翻譯過來是I LOVE YOU，提交還要大寫，不要臉。</p><h3 id="password"><a href="#password" class="headerlink" title="password"></a>password</h3><p>原本又HxD等等軟體都打不開，想說這到底是什麼，沒想到notepad++直接打開，使用字元集GB2312來進行解碼之後可以觀看。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">姓名：张三 </span><br><span class="line">生日：19900315</span><br><span class="line"></span><br><span class="line">key格式为key&#123;xxxxxxxxxx&#125;</span><br></pre></td></tr></table></figure><p>要填入十個數字，猜測應該是姓名加上生日，但沒想到是縮寫，厲害了羅馬拼音。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;zs19900315&#125;</span><br></pre></td></tr></table></figure><h3 id="變異凱撒"><a href="#變異凱撒" class="headerlink" title="變異凱撒"></a>變異凱撒</h3><p>原本以為就是ROT13的變形，結果沒想到列出所有組合都怪怪的，然後去找了一下^，確認他在ASCII裡面。</p><p>然後可以看到一些規律。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a+5=f</span><br><span class="line">f+6=l</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>然後直接解碼就好，取得flag。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">caesar</span>(<span class="params">cipher</span>):</span><br><span class="line">    j = <span class="number">5</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> cipher:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(i) + j), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">caesar(<span class="string">&quot;afZ_r9VYfScOeO_UL^RWUc&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Quoted-printable"><a href="#Quoted-printable" class="headerlink" title="Quoted-printable"></a>Quoted-printable</h3><p>題目給的密文是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">=E9=82=A3=E4=BD=A0=E4=B9=9F=E5=BE=88=E6=A3=92=E5=93=A6</span><br></pre></td></tr></table></figure><p>先查詢Quoted-printable是什麼東西，發現維基百科的定義如下。</p><blockquote><p>Quoted-printable或QP encoding，沒有規範的中文譯名，可譯為可列印字元參照編碼或使用可列印字元的編碼。Quoted-printable是使用可列印的ASCII字元（如字母、數字與「&#x3D;」）表示各種編碼格式下的字元，以便能在7-bit資料通路上傳輸8-bit資料, 或者更一般地說在非8-bit clean媒體上正確處理資料。這被定義為MIME content transfer encoding，用於e-mail。</p></blockquote><p>以此網站進行decoder即可取得flag內容。</p><p><a href="https://www.webatic.com/quoted-printable-convertor">https://www.webatic.com/quoted-printable-convertor</a></p><h3 id="Rabbit"><a href="#Rabbit" class="headerlink" title="Rabbit"></a>Rabbit</h3><p>題目給的密文是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">U2FsdGVkX1/+ydnDPowGbjjJXhZxm2MP2AgI</span><br></pre></td></tr></table></figure><p>先查詢Rabbit密碼是什麼東西，網路上的資訊如下。</p><blockquote><p>Rabbit流密碼是由Cryptico公司（<a href="http://www.cryptico.com/">http://www.cryptico.com</a> ）設計的，金鑰長度128位，<br>最大加密訊息長度為264 Bytes，即16 TB，若訊息超過該長度，則需要更換金鑰對剩下的訊息進行處理。它是目前安全性較高，加&#x2F;解密速度比較高效的流密碼之一，在各種處理器平臺上都有不凡的表現。</p></blockquote><p><a href="http://tools.jb51.net/password/rabbit_encode">http://tools.jb51.net/password/rabbit_encode</a></p><p>使用此網站進行解碼即可取得flag。</p><h3 id="籬笆牆的影子"><a href="#籬笆牆的影子" class="headerlink" title="籬笆牆的影子"></a>籬笆牆的影子</h3><p>題目給的密文是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">felhaagv&#123;ewtehtehfilnakgw&#125;</span><br></pre></td></tr></table></figure><p>題目給出的題示是 :<br>星星還是那顆星星喲<br>月亮還是那個月亮<br>山也還是那座山喲<br>梁也還是那道梁<br>碾子是碾子缸是缸喲<br>爹是爹來娘是娘<br>麻油燈呵還吱吱響<br>點的還是那麼丁點亮<br>哦哦</p><p>完全…看不懂，查詢之後發現是歌詞。</p><p>哭阿，方向完全錯了，這是柵欄密碼。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">felhaagv&#123;ewtehtehfilnakgw&#125;</span><br><span class="line">f l a g &#123; w e t h i n k w</span><br><span class="line"> e h a v e t h e f l a g &#125;</span><br></pre></td></tr></table></figure><p>於是可以用這種簡單的方法解出flag{wethinkwehavetheflag}</p><p>爛死了。</p><h3 id="丟失的MD5"><a href="#丟失的MD5" class="headerlink" title="丟失的MD5"></a>丟失的MD5</h3><p>題目給出一個py檔。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib   </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">            m=hashlib.md5()</span><br><span class="line">            m.update(<span class="string">&#x27;TASC&#x27;</span>+<span class="built_in">chr</span>(i)+<span class="string">&#x27;O3RJMV&#x27;</span>+<span class="built_in">chr</span>(j)+<span class="string">&#x27;WDJKX&#x27;</span>+<span class="built_in">chr</span>(k)+<span class="string">&#x27;ZM&#x27;</span>)</span><br><span class="line">            des=m.hexdigest()</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;e9032&#x27;</span> <span class="keyword">in</span> des <span class="keyword">and</span> <span class="string">&#x27;da&#x27;</span> <span class="keyword">in</span> des <span class="keyword">and</span> <span class="string">&#x27;911513&#x27;</span> <span class="keyword">in</span> des:</span><br><span class="line">                <span class="built_in">print</span>(des)</span><br></pre></td></tr></table></figure><p>嘗試運行後發現被提示需要編碼，修正後讓他可以運行。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib   </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">            m=hashlib.md5()</span><br><span class="line">            m.update(<span class="built_in">str</span>(<span class="string">&#x27;TASC&#x27;</span>+<span class="built_in">chr</span>(i)+<span class="string">&#x27;O3RJMV&#x27;</span>+<span class="built_in">chr</span>(j)+<span class="string">&#x27;WDJKX&#x27;</span>+<span class="built_in">chr</span>(k)+<span class="string">&#x27;ZM&#x27;</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">            des=m.hexdigest()</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;e9032&#x27;</span> <span class="keyword">in</span> des <span class="keyword">and</span> <span class="string">&#x27;da&#x27;</span> <span class="keyword">in</span> des <span class="keyword">and</span> <span class="string">&#x27;911513&#x27;</span> <span class="keyword">in</span> des:</span><br><span class="line">                <span class="built_in">print</span>(des)</span><br></pre></td></tr></table></figure><p>執行後獲得</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">e9032994dabac08080091151380478a2</span><br></pre></td></tr></table></figure><p>感覺是hex(十六進位)，但丟進去decoder成ascii和base64都不太對的感覺。<br>然後發現自己是笨蛋，題目就說他是MD5，啊我怎麼沒感覺。</p><p>最後發現這就是答案了，哭阿哭阿，我是笨蛋。</p><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><p>p&#x3D;473398607161，q&#x3D;4511491，e&#x3D;17，求解 d</p><p>使用公式解就可以了</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p =gmpy2.mpz(<span class="number">473398607161</span>)</span><br><span class="line">q =gmpy2.mpz(<span class="number">4511491</span>)</span><br><span class="line">e =gmpy2.mpz(<span class="number">17</span>)</span><br><span class="line">phi_n= (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi_n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;d is:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (d)</span><br></pre></td></tr></table></figure><p>拿到flag</p><h3 id="Alice與Bob"><a href="#Alice與Bob" class="headerlink" title="Alice與Bob"></a>Alice與Bob</h3><p>密碼學歷史中，有兩位知名的傑出人物，Alice和Bob。他們的愛情經過置換和輪加密也難以混淆，即使是沒有身份認證也可以知根知底。就像在數學王國中的素數一樣，孤傲又熱情。下面是一個大整數:98554799767,請分解為兩個素數，分解後，小的放前面，大的放後面，合成一個新的數字，進行md5的32位小寫哈希，提交答案。</p><p>整數n小於256bit，可以透過本地工具爆破成功，直接打開RSATool2v17。</p><p>不然也可以使用線上工具 <a href="http://factordb.com/">http://factordb.com/</a> 查詢。</p><p>爆破結果p &#x3D; 101999, q &#x3D; 966233</p><p>以 101999966233 在 <a href="http://www.hiencode.com/hash.html">http://www.hiencode.com/hash.html</a> 這類線上工具進行MD5的hash計算，得到flag。</p><h3 id="rsarsa"><a href="#rsarsa" class="headerlink" title="rsarsa"></a>rsarsa</h3><p>題目:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Math is cool! Use the RSA algorithm to decode the secret message, c, p, q, and e are parameters for the RSA algorithm.</span><br><span class="line"></span><br><span class="line">p =  9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span><br><span class="line">q =  11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span><br><span class="line">e =  65537</span><br><span class="line">c =  83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span><br><span class="line"></span><br><span class="line">Use RSA to find the secret message</span><br></pre></td></tr></table></figure><p>利用RSATool2v17計算出d</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d = 56632047571190660567520341028861194862411428416862507034762587229995138605649836960220619903456392752115943299335385163216233744624623848874235303309636393446736347238627793022725260986466957974753004129210680401432377444984195145009801967391196615524488853620232925992387563270746297909112117451398527453977</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">p =  <span class="number">9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span></span><br><span class="line">q =  <span class="number">11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span></span><br><span class="line">c =  <span class="number">83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span></span><br><span class="line">d = <span class="number">56632047571190660567520341028861194862411428416862507034762587229995138605649836960220619903456392752115943299335385163216233744624623848874235303309636393446736347238627793022725260986466957974753004129210680401432377444984195145009801967391196615524488853620232925992387563270746297909112117451398527453977</span></span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(c, d, n))</span><br></pre></td></tr></table></figure><p>得到flag。</p><h3 id="大帝的密碼武器"><a href="#大帝的密碼武器" class="headerlink" title="大帝的密碼武器"></a>大帝的密碼武器</h3><p>看到大帝直覺又是凱薩密碼，</p><p>用HxD打開，看到開頭兩個字是PK，應該是zip的標示，加上副檔名.zip之後解壓縮，得到題目。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">公元前一百年，在罗马出生了一位对世界影响巨大的人物，他生前是罗马三巨头之一。他率先使用了一种简单的加密函，因此这种加密方法以他的名字命名。</span><br><span class="line">以下密文被解开后可以获得一个有意义的单词：FRPHEVGL</span><br><span class="line">你可以用这个相同的加密向量加密附件中的密文，作为答案进行提交。</span><br></pre></td></tr></table></figure><p>將FRPHEVGL跑25種ROT之後可以得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FRPHEVGL</span><br><span class="line">GSQIFWHM</span><br><span class="line">HTRJGXIN</span><br><span class="line">IUSKHYJO</span><br><span class="line">JVTLIZKP</span><br><span class="line">KWUMJALQ</span><br><span class="line">LXVNKBMR</span><br><span class="line">MYWOLCNS</span><br><span class="line">NZXPMDOT</span><br><span class="line">OAYQNEPU</span><br><span class="line">PBZROFQV</span><br><span class="line">QCASPGRW</span><br><span class="line">RDBTQHSX</span><br><span class="line">SECURITY</span><br><span class="line">TFDVSJUZ</span><br><span class="line">UGEWTKVA</span><br><span class="line">VHFXULWB</span><br><span class="line">WIGYVMXC</span><br><span class="line">XJHZWNYD</span><br><span class="line">YKIAXOZE</span><br><span class="line">ZLJBYPAF</span><br><span class="line">AMKCZQBG</span><br><span class="line">BNLDARCH</span><br><span class="line">COMEBSDI</span><br><span class="line">DPNFCTEJ</span><br></pre></td></tr></table></figure><p>懶得看哪個是有意義的單詞，直接丟Google翻譯，得到單詞是SECURITY，順便確定只是簡單的ROT13。<br>然後沒找到要加密的密文在哪，後來發現SECURITY也不是密文 &#x3D; &#x3D;，查了一下發現大家還會拿到一個密文叫ComeChina，題目感覺出了問題，丟進ROT13，得到flag。</p><h3 id="Windows系統密碼"><a href="#Windows系統密碼" class="headerlink" title="Windows系統密碼"></a>Windows系統密碼</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">ctf:1002:06af9108f2e1fecf144e2e8adef09efd:a7fcb22a88038f35a8f39d503e7f0062:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">SUPPORT_388945a0:1001:aad3b435b51404eeaad3b435b51404ee:bef14eee40dffbc345eeb3f58e290d56:::</span><br></pre></td></tr></table></figure><p>從 <a href="https://www.secpulse.com/archives/65256.html">https://www.secpulse.com/archives/65256.html</a> 此篇文章可以看出windows有兩種密碼處理方式，其中NT LAN Manager（NTLM）的格式跟題目給出的格式一樣。</p><p>將06af9108f2e1fecf144e2e8adef09efd和a7fcb22a88038f35a8f39d503e7f0062分別丟入 <a href="https://www.cmd5.com/">https://www.cmd5.com/</a> 後，後者可以得到有意義的flag。</p><p>先寫到這裡，之後再慢慢更新。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux-shell的撰寫</title>
      <link href="/linux-shell/"/>
      <url>/linux-shell/</url>
      
        <content type="html"><![CDATA[<p>分享一下去年修作業系統的時候寫出來的shell(最終成績97，因為做不到多重檔案重定向被扣了三分)，shell主要結構大概是這樣，沒記錯的話，這也是恐龍書裡面的架構，接下來要做的事情僅僅只是依據此架構進行延伸。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (TRUE)&#123;</span><br><span class="line">    <span class="built_in">type_prompt</span>();</span><br><span class="line">    <span class="built_in">read_command</span>(command, parameters);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fork() != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">waitpid</span>(<span class="number">-1</span>, &amp;status, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">execvp</span>(command, parameters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>將程式碼初步補充完之後，可以得到下面的架構，這部分是初步的完成品，也是我覺得很好的學習範例。</p><p>目前能夠執行基礎的指令，但不能實現pipe檢測和檔案重定向等功能。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TRUE 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">type_prompt</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read_command</span><span class="params">(<span class="type">char</span> *, <span class="type">char</span> **)</span></span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_LENGTH = <span class="number">256</span>;</span><br><span class="line">string local = <span class="string">&quot;~\\&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> *command = <span class="keyword">new</span> <span class="type">char</span>[MAX_LENGTH];</span><br><span class="line">  <span class="type">char</span> **parameters = <span class="keyword">new</span> <span class="type">char</span> *[MAX_LENGTH];</span><br><span class="line">  <span class="type">int</span> status = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//進入畫面</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Welcome to AfanShell&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;ctrl-c or ctrl-\\ to quit&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (TRUE)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">type_prompt</span>();</span><br><span class="line">    <span class="built_in">read_command</span>(command, parameters);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fork() != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">waitpid</span>(<span class="number">-1</span>, &amp;status, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">execvp</span>(command, parameters);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">type_prompt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;AfanShell@&quot;</span></span><br><span class="line">       &lt;&lt; <span class="string">&quot;&gt; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read_command</span><span class="params">(<span class="type">char</span> *command, <span class="type">char</span> **parameters)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> *tmp = <span class="keyword">new</span> <span class="type">char</span>[MAX_LENGTH];</span><br><span class="line">  <span class="type">char</span> *token;</span><br><span class="line">  <span class="comment">// char *pipe = &quot;|&quot;; //檢測pipe功能啦</span></span><br><span class="line">  <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAX_LENGTH; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    parameters[i] = <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  cin.<span class="built_in">getline</span>(tmp, MAX_LENGTH - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  token = <span class="built_in">strtok</span>(tmp, <span class="string">&quot; &quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> (token != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    parameters[count] = <span class="keyword">new</span> <span class="type">char</span>[MAX_LENGTH];</span><br><span class="line">    <span class="built_in">strcpy</span>(parameters[count], token);</span><br><span class="line">    token = <span class="built_in">strtok</span>(<span class="literal">NULL</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line">    count++;</span><br><span class="line">    <span class="keyword">if</span> (count == MAX_LENGTH - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">    parameters[<span class="number">0</span>] = <span class="keyword">new</span> <span class="type">char</span>[MAX_LENGTH];</span><br><span class="line">    <span class="built_in">strcpy</span>(parameters[<span class="number">0</span>], <span class="string">&quot;echo&quot;</span>);</span><br><span class="line">    parameters[<span class="number">1</span>] = <span class="keyword">new</span> <span class="type">char</span>[MAX_LENGTH];</span><br><span class="line">    <span class="built_in">strcpy</span>(parameters[<span class="number">1</span>], <span class="string">&quot;No input received&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">strcpy</span>(command, parameters[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最終成果如下，將pipe補上，但要注意的是不可以做多重檔案重定向。</p><p>另外將程式碼改成c，雖然改動範圍不大就是了，希望對大家有幫助。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * author Afan Chen. </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> *args[<span class="number">512</span>];</span><br><span class="line"><span class="type">pid_t</span> pid;</span><br><span class="line"><span class="type">int</span> command_pipe[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> READ 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WRITE 1</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">execute</span><span class="params">(<span class="type">char</span> *cmd, <span class="type">int</span> input, <span class="type">int</span> first, <span class="type">int</span> last)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">WaitChild</span><span class="params">(<span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">char</span> line[<span class="number">500</span>];</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">type_prompt</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">read_command</span><span class="params">(<span class="type">int</span> input, <span class="type">int</span> first, <span class="type">int</span> last)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello!\nThis is Afan@Shell\nctrl-c or ctrl-\\ to quit\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">type_prompt();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!fgets(line, <span class="number">1024</span>, <span class="built_in">stdin</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   </span><br><span class="line"><span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> first = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *cmd = line;</span><br><span class="line"><span class="type">char</span> *next = <span class="built_in">strchr</span>(cmd, <span class="string">&#x27;|&#x27;</span>); <span class="comment">/* 找第一個 &#x27;|&#x27; */</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *file = <span class="string">&quot;&lt;&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strpbrk</span>(cmd, file) != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">system(cmd);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">*next = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">input = execute(cmd, input, first, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">cmd = next + <span class="number">1</span>;</span><br><span class="line">next = <span class="built_in">strchr</span>(cmd, <span class="string">&#x27;|&#x27;</span>); <span class="comment">/* 找其他的 &#x27;|&#x27; */</span></span><br><span class="line">first = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">input = execute(cmd, input, first, <span class="number">1</span>);</span><br><span class="line">WaitChild(n);</span><br><span class="line">n = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">type_prompt</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Afan@Shell:$ &quot;</span>);</span><br><span class="line">  fflush(<span class="literal">NULL</span>);<span class="comment">//清空緩衝區，把字串print出來</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">read_command</span><span class="params">(<span class="type">int</span> input, <span class="type">int</span> first, <span class="type">int</span> last)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> pipettes[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">pipe(pipettes);</span><br><span class="line">pid = fork();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (first == <span class="number">1</span> &amp;&amp; last == <span class="number">0</span> &amp;&amp; input == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">dup2(pipettes[WRITE], STDOUT_FILENO);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (first == <span class="number">0</span> &amp;&amp; last == <span class="number">0</span> &amp;&amp; input != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">dup2(input, STDIN_FILENO);</span><br><span class="line">dup2(pipettes[WRITE], STDOUT_FILENO);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">dup2(input, STDIN_FILENO);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (execvp(args[<span class="number">0</span>], args) == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;OOOOOOOh!It&#x27;s wrong.\n&quot;</span>);</span><br><span class="line">_exit(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (input != <span class="number">0</span>)</span><br><span class="line">close(input);</span><br><span class="line"></span><br><span class="line">close(pipettes[WRITE]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (last == <span class="number">1</span>)</span><br><span class="line">close(pipettes[READ]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pipettes[READ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">WaitChild</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">wait(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* <span class="title function_">SkipWhite</span><span class="params">(<span class="type">char</span> *s)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isspace</span>(*s))</span><br><span class="line">s++;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Split</span><span class="params">(<span class="type">char</span> *cmd)</span></span><br><span class="line">&#123;</span><br><span class="line">cmd = SkipWhite(cmd);</span><br><span class="line"><span class="type">char</span> *next = <span class="built_in">strchr</span>(cmd, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">next[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">args[i] = cmd;</span><br><span class="line">i++;</span><br><span class="line">cmd = SkipWhite(next + <span class="number">1</span>);</span><br><span class="line">next = <span class="built_in">strchr</span>(cmd, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cmd[<span class="number">0</span>] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">args[i] = cmd;</span><br><span class="line">next = <span class="built_in">strchr</span>(cmd, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">next[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">args[i] = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">execute</span><span class="params">(<span class="type">char</span> *cmd, <span class="type">int</span> input, <span class="type">int</span> first, <span class="type">int</span> last)</span></span><br><span class="line">&#123;</span><br><span class="line">Split(cmd);</span><br><span class="line"><span class="keyword">if</span> (args[<span class="number">0</span>] != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">n += <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> read_command(input, first, last);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 作業系統 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>gpu server 架好之後的一些常用指令</title>
      <link href="/gpu-server-command/"/>
      <url>/gpu-server-command/</url>
      
        <content type="html"><![CDATA[<p>之前參加AI Cup的時候跟資工系的蘇木春教授借了一台GPU server來給組員遠端做使用，這是當時撰寫的一些簡單規範，從hackMD拿過來這邊放當備份。</p><h2 id="運行你的程式前，請先做以下事項"><a href="#運行你的程式前，請先做以下事項" class="headerlink" title="!運行你的程式前，請先做以下事項"></a>!運行你的程式前，請先做以下事項</h2><p>查詢有沒有人在用gpu，使用率很高的話，請在跑的時候指定沒人用的gpu</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><h2 id="一些會常用的指令"><a href="#一些會常用的指令" class="headerlink" title="一些會常用的指令"></a>一些會常用的指令</h2><h3 id="下載python"><a href="#下載python" class="headerlink" title="下載python"></a>下載python</h3><p>工作站裡面沒有python3.8，只有到3.6，所以需要自己下載，步驟如下，一次請只輸入一條指令。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install software-properties-common</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:deadsnakes/ppa</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install python3.8</span><br></pre></td></tr></table></figure><p>成功安裝的話運行這個，理論上會出現Python 3.8.12</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3.8 --version</span><br></pre></td></tr></table></figure><h3 id="傳送檔案"><a href="#傳送檔案" class="headerlink" title="傳送檔案"></a>傳送檔案</h3><p>要傳送檔案到工作站的話，ssh下可以使用以下指令，之後輸入一下密碼就好了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp -P 30003 要傳送的檔案 user2@140.115.51.161:~/data(目的地)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp -P 30003 -r 要傳送的檔案目錄 user2@140.115.51.161:~/data(目的地)</span><br></pre></td></tr></table></figure><h3 id="安裝虛擬環境"><a href="#安裝虛擬環境" class="headerlink" title="安裝虛擬環境"></a>安裝虛擬環境</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install virtualenv</span><br><span class="line">python3.8 -m virtualenv venv --python=python3.8</span><br></pre></td></tr></table></figure><h3 id="開啟虛擬環境"><a href="#開啟虛擬環境" class="headerlink" title="開啟虛擬環境"></a>開啟虛擬環境</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ./venv/bin/activate</span><br></pre></td></tr></table></figure><h3 id="跑模型"><a href="#跑模型" class="headerlink" title="跑模型"></a>跑模型</h3><p>在yolov5底下開啟venv虛擬環境之後，輸入以下指令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup python3.8 -m torch.distributed.launch --nproc_per_node 2 train.py --img 1280 --batch 16 --epochs 200 --data train.yaml --weights yolov5s.pt --device 0,1</span><br></pre></td></tr></table></figure><h3 id="離開ssh時讓模型繼續跑"><a href="#離開ssh時讓模型繼續跑" class="headerlink" title="離開ssh時讓模型繼續跑"></a>離開ssh時讓模型繼續跑</h3><p>進入一個程序管理器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tmux</span><br></pre></td></tr></table></figure><p>接下來執行完跑模型的操作之後依序按下ctrl+b和d，就可以退出當前程式，並讓程式在背景運行</p><h3 id="下載模型"><a href="#下載模型" class="headerlink" title="下載模型"></a>下載模型</h3><p>訓練完的模型從伺服器裡面下載回來做使用。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp -r -P 30001 user2@140.115.51.161:~/project/yolov5/runs/t</span><br><span class="line">rain/exp2 G:\project</span><br></pre></td></tr></table></figure><h3 id="下載解壓縮套件"><a href="#下載解壓縮套件" class="headerlink" title="下載解壓縮套件"></a>下載解壓縮套件</h3><p>因為圖片太多了，基本上都是壓縮成一個檔案上傳，但伺服器端沒有解壓縮的套件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install zip</span><br></pre></td></tr></table></figure><p>之後就可以使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unzip 檔案名稱</span><br></pre></td></tr></table></figure><p>來解壓縮到當前路徑</p><h3 id="建立資料夾"><a href="#建立資料夾" class="headerlink" title="建立資料夾"></a>建立資料夾</h3><p>如果要在本地和遠端都建立一個專案來跑的話，請先在遠端home&#x2F;user?之下先建立檔案路徑，可以使用以下指令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir 資料夾名稱</span><br></pre></td></tr></table></figure><h3 id="跑文本識別"><a href="#跑文本識別" class="headerlink" title="跑文本識別"></a>跑文本識別</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m paddle.distributed.launch --gpus &#x27;0,1&#x27;  tools/train.py -c configs/rec/rec_icdar15_train.yml</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 機器學習 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo-theme-butterfly 常用語法</title>
      <link href="/set-hexo-theme/"/>
      <url>/set-hexo-theme/</url>
      
        <content type="html"><![CDATA[<p>給自己的一個備忘錄，一般的markdown語法就不提了。</p><p>主要想記錄我自己未來應該會用到的語法，之後寫作用。</p><p>轉載自<a href="https://butterfly.js.org/posts/dc584b87">https://butterfly.js.org/posts/dc584b87</a></p><h3 id="Page-Front-matter"><a href="#Page-Front-matter" class="headerlink" title="Page Front-matter"></a>Page Front-matter</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">type:</span><br><span class="line">comments:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aside:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>寫法解釋<br>title【必需】頁面標題<br>date【必需】頁面創建日期<br>type【必需】標籤、分類和友情鏈接三個頁面需要配置<br>updated【可選】頁面更新日期<br>description【可選】頁面描述<br>keywords【可選】頁面關鍵字<br>comments【可選】顯示頁面評論模塊(默認 true)<br>top_img【可選】頁面頂部圖片<br>mathjax【可選】顯示mathjax(當設置mathjax的per_page: false時，才需要配置，默認 false)<br>katex【可選】顯示katex(當設置katex的per_page: false時，才需要配置，默認 false)<br>aside【可選】顯示側邊欄 (默認 true)<br>aplayer【可選】在需要的頁面加載aplayer的js和css,請參考文章下面的音樂 配置<br>highlight_shrink【可選】配置代碼框是否展開(true&#x2F;false)(默認為設置中highlight_shrink的配置)</p><h3 id="Post-Front-matter"><a href="#Post-Front-matter" class="headerlink" title="Post Front-matter"></a>Post Front-matter</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">comments:</span></span><br><span class="line"><span class="emphasis">cover:</span></span><br><span class="line"><span class="emphasis">toc:</span></span><br><span class="line"><span class="emphasis">toc_</span>number:</span><br><span class="line">toc<span class="emphasis">_style_</span>simple:</span><br><span class="line">copyright:</span><br><span class="line">copyright<span class="emphasis">_author:</span></span><br><span class="line"><span class="emphasis">copyright_</span>author<span class="emphasis">_href:</span></span><br><span class="line"><span class="emphasis">copyright_</span>url:</span><br><span class="line">copyright<span class="emphasis">_info:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br><span class="line"><span class="section">aside:</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>寫法解釋<br>title【必需】文章標題<br>date【必需】文章創建日期<br>updated【可選】文章更新日期<br>tags【可選】文章標籤<br>categories【可選】文章分類<br>keywords【可選】文章關鍵字<br>description【可選】文章描述<br>top_img【可選】文章頂部圖片<br>cover【可選】文章縮略圖(如果沒有設置top_img,文章頁頂部將顯示縮略圖，可設為false&#x2F;圖片地址&#x2F;留空)<br>comments【可選】顯示文章評論模塊(默認 true)<br>toc【可選】顯示文章TOC(默認為設置中toc的enable配置)<br>toc_number【可選】顯示toc_number(默認為設置中toc的number配置)<br>toc_style_simple【可選】顯示 toc 簡潔模式<br>copyright【可選】顯示文章版權模塊(默認為設置中post_copyright的enable配置)<br>copyright_author【可選】文章版權模塊的文章作者<br>copyright_author_href【可選】文章版權模塊的文章作者鏈接<br>copyright_url【可選】文章版權模塊的文章連結鏈接<br>copyright_info【可選】文章版權模塊的版權聲明文字<br>mathjax【可選】顯示mathjax(當設置mathjax的per_page: false時，才需要配置，默認 false)<br>katex【可選】顯示katex(當設置katex的per_page: false時，才需要配置，默認 false)<br>aplayer【可選】在需要的頁面加載aplayer的js和css,請參考文章下面的音樂 配置<br>highlight_shrink【可選】配置代碼框是否展開(true&#x2F;false)(默認為設置中highlight_shrink的配置)<br>aside【可選】顯示側邊欄 (默認 true)</p><h3 id="Gallery-相冊"><a href="#Gallery-相冊" class="headerlink" title="Gallery 相冊"></a>Gallery 相冊</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg"><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg"><br><img src="https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg"><br><img src="https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg"><br><img src="https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg"><br><img src="https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg"><br><img src="https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg"><br><img src="https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg"></p>          </div><h3 id="圖表繪製"><a href="#圖表繪製" class="headerlink" title="圖表繪製"></a>圖表繪製</h3><p>使用mermaid標籤可以繪製Flowchart（流程圖）、Sequence diagram（時序圖 ）、Class Diagram（類別圖）、State Diagram（狀態圖）、Gantt（甘特圖）和Pie Chart（圓形圖），具體可以查看<a href="https://mermaid-js.github.io/mermaid/#/">mermaid文檔</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">pie</span><br><span class="line">    title Key elements in Product X</span><br><span class="line">    &quot;Calcium&quot; : 42.96</span><br><span class="line">    &quot;Potassium&quot; : 50.05</span><br><span class="line">    &quot;Magnesium&quot; : 10.01</span><br><span class="line">    &quot;Iron&quot; :  5</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  pie    title Key elements in Product X    &quot;Calcium&quot; : 42.96    &quot;Potassium&quot; : 50.05    &quot;Magnesium&quot; : 10.01    &quot;Iron&quot; :  5  </pre></div><h3 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br><span class="line">Unique name   : Unique name of tabs block tag without comma.</span><br><span class="line">                Will be used in #id&#x27;s as prefix for each tab with their index numbers.</span><br><span class="line">                If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes.</span><br><span class="line">                Only for current url of post/page must be unique!</span><br><span class="line">[index]       : Index number of active tab.</span><br><span class="line">                If not specified, first tab (1) will be selected.</span><br><span class="line">                If index is -1, no tab will be selected. It&#x27;s will be something like spoiler.</span><br><span class="line">                Optional parameter.</span><br><span class="line">[Tab caption] : Caption of current tab.</span><br><span class="line">                If not caption specified, unique name with tab index suffix will be used as caption of tab.</span><br><span class="line">                If not caption specified, but specified icon, caption will empty.</span><br><span class="line">                Optional parameter.</span><br><span class="line">[@icon]       : FontAwesome icon name (full-name, look like &#x27;fas fa-font&#x27;)</span><br><span class="line">                Can be specified with or without space; e.g. &#x27;Tab caption @icon&#x27; similar to &#x27;Tab caption@icon&#x27;.</span><br><span class="line">                Optional parameter.</span><br></pre></td></tr></table></figure><p>實際使用大概像是這樣</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一個Tab --&gt;</span><br><span class="line">**tab名字為第一個Tab**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line">**只有圖標 沒有Tab名字**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸彈@fas fa-bomb --&gt;</span><br><span class="line">**名字+icon**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一個Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸彈</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字為第一個Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有圖標 沒有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="內嵌圖片"><a href="#內嵌圖片" class="headerlink" title="內嵌圖片"></a>內嵌圖片</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% inlineImg [src] [height] %&#125;</span><br><span class="line"></span><br><span class="line">[src]      :    圖片鏈接</span><br><span class="line">[height]   ：   圖片高度限制【可選】</span><br></pre></td></tr></table></figure><h3 id="highlight"><a href="#highlight" class="headerlink" title="highlight"></a>highlight</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% label text color %&#125;</span><br></pre></td></tr></table></figure><p>參數解釋<br>text文字<br>color【可選】背景顏色，默認為 default(default&#x2F;blue&#x2F;pink&#x2F;red&#x2F;purple&#x2F;orange&#x2F;green)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">臣亮言：&#123;% label 先帝 %&#125;創業未半，而&#123;% label 中道崩殂 blue %&#125;。今天下三分，&#123;% label 益州疲敝 pink %&#125;，此誠&#123;% label 危急存亡之秋 red %&#125;也！然侍衞之臣，不懈於內；&#123;% label 忠志之士 purple %&#125;，忘身於外者，蓋追先帝之殊遇，欲報之於陛下也。誠宜開張聖聽，以光先帝遺德，恢弘志士之氣；不宜妄自菲薄，引喻失義，以塞忠諫之路也。</span><br><span class="line">宮中、府中，俱為一體；陟罰臧否，不宜異同。若有&#123;% label 作奸 orange %&#125;、&#123;% label 犯科 green %&#125;，及為忠善者，宜付有司，論其刑賞，以昭陛下平明之治；不宜偏私，使內外異法也。</span><br></pre></td></tr></table></figure><p>臣亮言：<mark class="hl-label default">先帝</mark> 創業未半，而<mark class="hl-label blue">中道崩殂</mark> 。今天下三分，<mark class="hl-label pink">益州疲敝</mark> ，此誠<mark class="hl-label red">危急存亡之秋</mark> 也！然侍衞之臣，不懈於內；<mark class="hl-label purple">忠志之士</mark> ，忘身於外者，蓋追先帝之殊遇，欲報之於陛下也。誠宜開張聖聽，以光先帝遺德，恢弘志士之氣；不宜妄自菲薄，引喻失義，以塞忠諫之路也。<br>宮中、府中，俱為一體；陟罰臧否，不宜異同。若有<mark class="hl-label orange">作奸</mark> 、<mark class="hl-label green">犯科</mark> ，及為忠善者，宜付有司，論其刑賞，以昭陛下平明之治；不宜偏私，使內外異法也。</p><h3 id="timeline"><a href="#timeline" class="headerlink" title="timeline"></a>timeline</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% timeline title,color %&#125;</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line">xxxxx</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line">xxxxx</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><p>參數解釋<br>title標題&#x2F;時間線<br>colortimeline 顏色(default(留空) &#x2F; blue &#x2F; pink &#x2F; red &#x2F; purple &#x2F; orange &#x2F; green)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% timeline 2022 %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line">這是測試頁面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>這是測試頁面</p></div></div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% timeline 2022,red %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line">這是測試頁面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline red"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>這是測試頁面</p></div></div></div><h3 id="flink-友情連結"><a href="#flink-友情連結" class="headerlink" title="flink 友情連結"></a>flink 友情連結</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% flink %&#125;</span><br><span class="line">- class_name: 友情鏈接</span><br><span class="line">  class_desc: 那些人，那些事</span><br><span class="line">  link_list:</span><br><span class="line">    - name: JerryC</span><br><span class="line">      link: https://jerryc.me/</span><br><span class="line">      avatar: https://jerryc.me/img/avatar.png</span><br><span class="line">      descr: 今日事,今日畢</span><br><span class="line">    - name: Hexo</span><br><span class="line">      link: https://hexo.io/zh-tw/</span><br><span class="line">      avatar: https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span><br><span class="line">      descr: 快速、簡單且強大的網誌框架</span><br><span class="line"></span><br><span class="line">- class_name: 網站</span><br><span class="line">  class_desc: 值得推薦的網站</span><br><span class="line">  link_list:</span><br><span class="line">    - name: Youtube</span><br><span class="line">      link: https://www.youtube.com/</span><br><span class="line">      avatar: https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span><br><span class="line">      descr: 視頻網站</span><br><span class="line">    - name: Weibo</span><br><span class="line">      link: https://www.weibo.com/</span><br><span class="line">      avatar: https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png</span><br><span class="line">      descr: 中國最大社交分享平台</span><br><span class="line">    - name: Twitter</span><br><span class="line">      link: https://twitter.com/</span><br><span class="line">      avatar: https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span><br><span class="line">      descr: 社交分享平台</span><br><span class="line">&#123;% endflink %&#125;</span><br></pre></td></tr></table></figure><div class="flink"><div class="flink-name">友情鏈接</div><div class="flink-desc">那些人，那些事</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://jerryc.me/" title="JerryC" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://jerryc.me/img/avatar.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="JerryC" />              </div>              <div class="flink-item-name">JerryC</div>               <div class="flink-item-desc" title="今日事,今日畢">今日事,今日畢</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://hexo.io/zh-tw/" title="Hexo" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Hexo" />              </div>              <div class="flink-item-name">Hexo</div>               <div class="flink-item-desc" title="快速、簡單且強大的網誌框架">快速、簡單且強大的網誌框架</div>            </a>          </div></div><div class="flink-name">網站</div><div class="flink-desc">值得推薦的網站</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://www.youtube.com/" title="Youtube" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Youtube" />              </div>              <div class="flink-item-name">Youtube</div>               <div class="flink-item-desc" title="視頻網站">視頻網站</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://www.weibo.com/" title="Weibo" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Weibo" />              </div>              <div class="flink-item-name">Weibo</div>               <div class="flink-item-desc" title="中國最大社交分享平台">中國最大社交分享平台</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://twitter.com/" title="Twitter" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Twitter" />              </div>              <div class="flink-item-name">Twitter</div>               <div class="flink-item-desc" title="社交分享平台">社交分享平台</div>            </a>          </div></div></div>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 單層感知機實作</title>
      <link href="/perceptron/"/>
      <url>/perceptron/</url>
      
        <content type="html"><![CDATA[<p>因為類神經網路課程順便寫的，盡量簡潔和只使用單一 class，開箱即用，希望可以幫助到大家。</p><p>氣死網路上完全查不到這類型的相關程式碼乾脆自己發。</p><span id="more"></span><p>底下就是單層感知機的實作</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 單層感知機</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Afan Chen</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Perceptron</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">eta</span> <span class="operator">=</span> <span class="number">0.01</span>;    <span class="comment">//學習率</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">nIter</span> <span class="operator">=</span> <span class="number">50</span>;       <span class="comment">//迭代次數</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; errors;   <span class="comment">//預測錯誤數量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span>[] w;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用預設學習率的建構子</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Perceptron</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建構子</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> eta 學習率</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nIter 迭代次數</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Perceptron</span><span class="params">(<span class="type">double</span> eta, <span class="type">int</span> nIter)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.eta = eta;</span><br><span class="line">        <span class="built_in">this</span>.nIter = nIter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根據設定的eta跟迭代次數進行訓練</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y label</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fit</span><span class="params">(<span class="type">double</span>[][] x, <span class="type">double</span>[] y)</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        w = <span class="keyword">new</span> <span class="title class_">double</span>[x[<span class="number">0</span>].length + <span class="number">1</span>];</span><br><span class="line">        errors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; w.length; i++) &#123;</span><br><span class="line">            w[i] = random.nextGaussian();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nIter; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">error</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; y.length; j++) &#123;</span><br><span class="line">                <span class="type">double</span> <span class="variable">update</span> <span class="operator">=</span> eta * (y[j] - predict(x[j]));<span class="comment">//更新權重值</span></span><br><span class="line">                w[w.length - <span class="number">1</span>] += update;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; x[j].length; k++) &#123;</span><br><span class="line">                    w[k] += update * x[j][k];</span><br><span class="line">                &#125;</span><br><span class="line">                error += update != <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            errors.add(error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用來給我存取訓練過程中有多少的訓練錯誤</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">epochError</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 其實是update，只是我拿來畫迭代瞬間的圖</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y label</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> w weight</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> new weight</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span>[] epoch(<span class="type">double</span>[][] x, <span class="type">double</span>[] y, <span class="type">double</span>[] w) &#123;</span><br><span class="line">        <span class="built_in">this</span>.w = w;</span><br><span class="line">        epochError = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; y.length; j++) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">update</span> <span class="operator">=</span> eta * (y[j] - predict(x[j]));<span class="comment">//更新權重值</span></span><br><span class="line">            w[w.length - <span class="number">1</span>] += update;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; x[j].length; k++) &#123;</span><br><span class="line">                w[k] += update * x[j][k];</span><br><span class="line">            &#125;</span><br><span class="line">            epochError += update != <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 雖然念起來是內積，但要注意他有先加上weights的最後一項(常數項)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x 單筆data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 內積結果加上常數項</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="title function_">dot</span><span class="params">(<span class="type">double</span>[] x)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">pred</span> <span class="operator">=</span> w[x.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; x.length; i++) &#123;</span><br><span class="line">            pred += x[i] * w[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pred;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 因為我要畫迭代的圖就又創了這個，把權重部分獨立出來</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x 單筆data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> weight 要傳入的權重</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 內積結果加上常數項</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="title function_">dot</span><span class="params">(<span class="type">double</span>[] x, <span class="type">double</span>[] weight)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">pred</span> <span class="operator">=</span> weight[x.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; x.length; i++) &#123;</span><br><span class="line">            pred += x[i] * weight[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pred;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 預測出結果是1 or -1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x 單筆data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 1 or -1 的預測值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">predict</span><span class="params">(<span class="type">double</span>[] x)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dot(x) &gt;= <span class="number">0</span> ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 預測出結果是1 or -1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x 單筆data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 1 or -1 的預測值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">predict</span><span class="params">(<span class="type">double</span>[] x, <span class="type">double</span>[] w)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dot(x, w) &gt;= <span class="number">0</span> ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把用fit function訓練出來過程紀錄的error list取出來</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> error list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title function_">getErrors</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> errors;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 獲取 weight</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> weight</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span>[] getW() &#123;</span><br><span class="line">        <span class="keyword">return</span> w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 設定 weight</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> w weight</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setW</span><span class="params">(<span class="type">double</span>[] w)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.w = w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大概就這樣，不要拿走說是自己寫的就好。</p>]]></content>
      
      
      <categories>
          
          <category> 機器學習 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用 python 快速進行 line bot 開發</title>
      <link href="/line-bot-developers-1/"/>
      <url>/line-bot-developers-1/</url>
      
        <content type="html"><![CDATA[<p>最近小摸了一下 line bot 的技術，老實說還算簡單好玩，但是感覺雷有點多，就乾脆自己寫了一篇簡單的初階教學。(x)</p><p>簡單的部分我跳過了，不然字數會太多，主要會圍繞在<a href="https://developers.line.biz/en/docs/"> line bot 官方文件</a>的解讀上，由於這種文章都會有時效性，如果不能照著做的話請通知我，雖然我也不一定會更新就是了，也歡迎直接觀看 document。</p><p>首先，來看看 Line 給開發者進行 API 對接的模式。</p><img src="/line-bot-developers-1/channel-access-token.png" class=""><span id="more"></span><p>從上圖中，可以很清楚的看到 line bot 中伺服器如何與 line server 進行對接和保障對話的安全性。</p><p>首先，大家請到 <a href="https://developers.line.biz/console">line的開發者平台</a> 上面驗證和註冊。</p><p>資料隨便填，註冊過程歡迎觀看 [30 天教你如何玩弄 Line bot API] 第 1 天：玩弄 Line bot API 第一步](<a href="https://ithelp.ithome.com.tw/articles/10215656)%E3%80%82">https://ithelp.ithome.com.tw/articles/10215656)。</a></p><p>註冊完全不是問題點，創建好 line bot 之後會給你必要的 token 等等，如果需要另外創建的話，可以另外使用 Assertion Signing Key ，生成可以到 <a href="https://mkjwk.org/">https://mkjwk.org/</a> 此網站進行。</p><img src="/line-bot-developers-1/RSA256_generator.png" class=""><p>按照這樣子選完之後將 public key 複製到 Assertion Signing Key 的申請欄位就好。</p><p>或者是可以在 Chrome 內的 js 控制台中輸入以下 code 並運行來生成。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> pair = <span class="keyword">await</span> crypto.<span class="property">subtle</span>.<span class="title function_">generateKey</span>(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;RSASSA-PKCS1-v1_5&#x27;</span>,</span><br><span class="line">      <span class="attr">modulusLength</span>: <span class="number">2048</span>,</span><br><span class="line">      <span class="attr">publicExponent</span>: <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]),</span><br><span class="line">      <span class="attr">hash</span>: <span class="string">&#x27;SHA-256&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">true</span>,</span><br><span class="line">    [<span class="string">&#x27;sign&#x27;</span>, <span class="string">&#x27;verify&#x27;</span>]</span><br><span class="line">  );</span><br><span class="line">   </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;=== private key ===&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="keyword">await</span> crypto.<span class="property">subtle</span>.<span class="title function_">exportKey</span>(<span class="string">&#x27;jwk&#x27;</span>, pair.<span class="property">privateKey</span>), <span class="literal">null</span>, <span class="string">&#x27;  &#x27;</span>));</span><br><span class="line">   </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;=== public key ===&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="keyword">await</span> crypto.<span class="property">subtle</span>.<span class="title function_">exportKey</span>(<span class="string">&#x27;jwk&#x27;</span>, pair.<span class="property">publicKey</span>), <span class="literal">null</span>, <span class="string">&#x27;  &#x27;</span>)); </span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>以下是本地端伺服器跟 line server 進行交互的架構圖。</p><img src="/line-bot-developers-1/channel-access-token-issue-flow.svg" class=""><p>不過這是非必要的啦，一般來說採用系統給的 channel-access-token 就行。</p><p>我一開始是用 js 摸的，後來覺得 python 比較熟一點就改用 python 了，接下來會講到如何在本地端搭起一個 server 來回應傳來的資訊。</p><p>我先介紹一下 python 要做哪些動作才能進行自動回覆訊息的功能。</p><h3 id="先建立一個-python-的虛擬環境"><a href="#先建立一個-python-的虛擬環境" class="headerlink" title="先建立一個 python 的虛擬環境"></a>先建立一個 python 的虛擬環境</h3><p>我是用 pychorm IDE 的自動建置虛擬環境，比較簡單一點，如果你是新手，也歡迎直接使用 pychorm，建置版本要求 Python &gt;&#x3D; 2.7 or &gt;&#x3D; 3.4，為求穩定和後續開發的間容性我使用3.7。</p><h3 id="下載-line-bot-sdk-。"><a href="#下載-line-bot-sdk-。" class="headerlink" title="下載 line-bot-sdk 。"></a>下載 line-bot-sdk 。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install line-bot-sdk</span><br></pre></td></tr></table></figure><h3 id="輸入程式碼"><a href="#輸入程式碼" class="headerlink" title="輸入程式碼"></a>輸入程式碼</h3><p>以下由 line bot 的官方說明文件範例進行小改寫後講解，先隨便建立一個.py檔案將以下程式碼輸入。</p><p><a href="https://github.com/line/line-bot-sdk-python">官方 github</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> argparse <span class="keyword">import</span> ArgumentParser</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, abort</span><br><span class="line"><span class="keyword">from</span> linebot <span class="keyword">import</span> (</span><br><span class="line">    LineBotApi, WebhookParser</span><br><span class="line">)</span><br><span class="line"><span class="keyword">from</span> linebot.exceptions <span class="keyword">import</span> (</span><br><span class="line">    InvalidSignatureError</span><br><span class="line">)</span><br><span class="line"><span class="keyword">from</span> linebot.models <span class="keyword">import</span> (</span><br><span class="line">    MessageEvent, TextMessage, TextSendMessage,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get channel_secret and channel_access_token from your environment variable</span></span><br><span class="line">channel_secret = os.getenv(<span class="string">&#x27;LINE_CHANNEL_SECRET&#x27;</span>, <span class="string">&#x27;你的CHANNEL_SECRET&#x27;</span>)</span><br><span class="line">channel_access_token = os.getenv(<span class="string">&#x27;LINE_CHANNEL_ACCESS_TOKEN&#x27;</span>, <span class="string">&#x27;你的CHANNEL_ACCESS_TOKEN&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> channel_secret <span class="keyword">is</span> <span class="string">&#x27;你的CHANNEL_SECRET&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Specify LINE_CHANNEL_SECRET as environment variable.&#x27;</span>)</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> channel_access_token <span class="keyword">is</span> <span class="string">&#x27;你的CHANNEL_ACCESS_TOKEN&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Specify LINE_CHANNEL_ACCESS_TOKEN as environment variable.&#x27;</span>)</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">line_bot_api = LineBotApi(channel_access_token)</span><br><span class="line">parser = WebhookParser(channel_secret)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/callback&quot;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">callback</span>():</span><br><span class="line">    signature = request.headers[<span class="string">&#x27;X-Line-Signature&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get request body as text</span></span><br><span class="line">    body = request.get_data(as_text=<span class="literal">True</span>)</span><br><span class="line">    app.logger.info(<span class="string">&quot;Request body: &quot;</span> + body)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># parse webhook body</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        events = parser.parse(body, signature)</span><br><span class="line">    <span class="keyword">except</span> InvalidSignatureError:</span><br><span class="line">        abort(<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># if event is MessageEvent and message is TextMessage, then echo text</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> events:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(event, MessageEvent):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(event.message, TextMessage):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        line_bot_api.reply_message(</span><br><span class="line">            event.reply_token,</span><br><span class="line">            TextSendMessage(text=event.message.text)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;OK&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    arg_parser = ArgumentParser(</span><br><span class="line">        usage=<span class="string">&#x27;Usage: python &#x27;</span> + __file__ + <span class="string">&#x27; [--port &lt;port&gt;] [--help]&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    arg_parser.add_argument(<span class="string">&#x27;-p&#x27;</span>, <span class="string">&#x27;--port&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">8000</span>, <span class="built_in">help</span>=<span class="string">&#x27;port&#x27;</span>)</span><br><span class="line">    arg_parser.add_argument(<span class="string">&#x27;-d&#x27;</span>, <span class="string">&#x27;--debug&#x27;</span>, default=<span class="literal">False</span>, <span class="built_in">help</span>=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">    options = arg_parser.parse_args()</span><br><span class="line"></span><br><span class="line">    app.run(debug=options.debug, port=options.port)</span><br></pre></td></tr></table></figure><p>這邊在後面要重填一下在註冊好的 <a href="https://developers.line.biz/console">https://developers.line.biz/console</a> 當中 Basic settings 內的 Channel secret 以及 Messaging API settings 中的 Channel access token (long-lived) 項目。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">channel_secret = os.getenv(<span class="string">&#x27;LINE_CHANNEL_SECRET&#x27;</span>, <span class="string">&#x27;你的 Channel secret&#x27;</span>)</span><br><span class="line">channel_access_token = os.getenv(<span class="string">&#x27;LINE_CHANNEL_ACCESS_TOKEN&#x27;</span>, <span class="string">&#x27;你的 Channel access token&#x27;</span>)</span><br></pre></td></tr></table></figure><p>沒有改直接跑的話，程式碼會出現下面字樣來提醒。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Specify LINE_CHANNEL_SECRET as environment variable.</span><br><span class="line">or</span><br><span class="line">Specify LINE_CHANNEL_ACCESS_TOKEN as environment variable.</span><br></pre></td></tr></table></figure><p><strong>不需要下載其他 lib 這樣就可以跑了。</strong></p><h3 id="讓程式可以跟外網溝通"><a href="#讓程式可以跟外網溝通" class="headerlink" title="讓程式可以跟外網溝通"></a>讓程式可以跟外網溝通</h3><p>但是我們會遇到下一個問題，跑完之後他會連到的位置是 <a href="http://localhost:8000，而">http://localhost:8000，而</a> line 的伺服器無法從外網送資料進入內網給程式，也拿不到要傳給使用者的內容。</p><p>這個時候就需要到 <a href="https://dashboard.ngrok.com/get-started/setup">ngrok 下載處</a>把他下載下來，ngrok 可以方便的將內網轉換成外網的一個隨機網址。</p><p>然後下面的運行部分是在 linux 環境下的指令，所以 windows 會出現找不到指令的情形，這個時候就到下載好解壓縮完的 ngrok.exe 所在資料夾，記下路徑然後在虛擬環境內新開一個 terminal (終端)，將路徑導向程式所在資料夾。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd C:\path to file</span><br></pre></td></tr></table></figure><p>接下來輸入下面的指令。</p><h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ngrok.exe http <span class="number">8000</span></span><br></pre></td></tr></table></figure><h4 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">./ngrok http <span class="number">80</span></span><br></pre></td></tr></table></figure><p>就可以看到類似以下的介面。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ngrok by @inconshreveable                                                                                                                                                                                              (Ctrl+C to quit)</span><br><span class="line"></span><br><span class="line">Session Status                online</span><br><span class="line">Session Expires               <span class="number">1</span> hour, <span class="number">8</span> minutes</span><br><span class="line">Version                       <span class="number">2.3</span><span class="number">.40</span></span><br><span class="line">Region                        United States (us)</span><br><span class="line">Web Interface                 http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">4041</span></span><br><span class="line">Forwarding                    http://<span class="number">3327</span>-<span class="number">218</span>-<span class="number">166</span>-<span class="number">17</span>-<span class="number">89.</span>ngrok.io -&gt; http://localhost:<span class="number">8000</span></span><br><span class="line">Forwarding                    https://<span class="number">3327</span>-<span class="number">218</span>-<span class="number">166</span>-<span class="number">17</span>-<span class="number">89.</span>ngrok.io -&gt; http://localhost:<span class="number">8000</span></span><br><span class="line"></span><br><span class="line">Connections                   ttl     opn     rt1     rt5     p50     p90     </span><br><span class="line">                              <span class="number">13</span>      <span class="number">0</span>       <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.32</span>    <span class="number">0.94</span>    </span><br><span class="line"></span><br><span class="line">HTTP Requests</span><br></pre></td></tr></table></figure><p><a href="https://3327-218-166-17-89.ngrok.io/">https://3327-218-166-17-89.ngrok.io</a> 就是 ngrok 幫我建立在外網的一個隨機網址，接下來將此網址複製，並在後面加上 &#x2F;callback (仔細看程式，程式會在這個網址回應)貼到 <a href="https://developers.line.biz/console">https://developers.line.biz/console</a> 中 Messaging API settings 內的 Webhook URL，貼完按下 verify 基本上就可以驗證成功了。</p><p>想要開啟 ngrok 提供的 Dashboard 的話請按下 Ctrl + 點選 Web Interface後面的網址，例如 <a href="http://127.0.0.1:4041/">http://127.0.0.1:4041</a> 。</p><p>如果需要多個 callback URL 的話，原先官方給的資料是換行填寫，但是我實測他換行功能好像鎖起來了，或許可以發一下 issue 詢問。</p><p>接下來用自己的手機將創建出來的機器人加為好友之後就可以開始玩了。</p><h3 id="該從哪裡開始下手去對於程式碼做出改變"><a href="#該從哪裡開始下手去對於程式碼做出改變" class="headerlink" title="該從哪裡開始下手去對於程式碼做出改變"></a>該從哪裡開始下手去對於程式碼做出改變</h3><p>找到callback()裡面的這個然後就可以先試著做更改了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> events:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(event, MessageEvent):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(event.message, TextMessage):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    line_bot_api.reply_message(</span><br><span class="line">        event.reply_token,</span><br><span class="line">        TextSendMessage(text=event.message.text)</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>在加入好友之後，可以對機器人進行對話。</p><p>例如對它說一個 hi。</p><p>接下來我幫大家捕捉了程式碼當中的 event 查看內部到底有什麼呢 ?</p><p>event 的格式如下:</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;14651735376424&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hi&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;active&quot;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;replyToken&quot;</span><span class="punctuation">:</span> <span class="string">&quot;48d30e0ca8594d5fb1f9d956f561597e&quot;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Ud3903825f232e3d357c074ece1efd5dd&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="number">1630174218140</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;message&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>可以從上很明顯的看出，使用者說了一個 hi，如果呼叫此函式。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">line_bot_api.reply_message(</span><br><span class="line">    event.reply_token,</span><br><span class="line">    TextSendMessage(text=event.message.text)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>機器人就會回應使用者一個 hi。</p><p>所以可以直接拿這個框架，配合簡單的字串處理找出關鍵字，回復使用者一些訊息。</p><p>基本上做到這裡就差不多完成了，但是 line bot 回復的時候還會多加上一段話。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">感謝您的訊息！</span><br><span class="line"></span><br><span class="line">很抱歉，本帳號無法個別回覆用戶的訊息。</span><br><span class="line">敬請期待我們下次發送的內容喔(content)</span><br></pre></td></tr></table></figure><p>這是因為在 Messaging API settings 中的 Auto-reply messages 有預設自動回復，點擊 edit 選項之後，將在進階設定內的自動回應訊息設定關閉就好了。</p><p>好累喔，不知不覺六千多字，圖片等資料傳送和處裡以及 line 的一些有趣功能下次再寫，寫部落格比直接實作難多了。</p>]]></content>
      
      
      <categories>
          
          <category> line bot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在部落格上面跑python和R</title>
      <link href="/try-to-use-python-or-R-in-my-blog/"/>
      <url>/try-to-use-python-or-R-in-my-blog/</url>
      
        <content type="html"><![CDATA[<p>其實也不算專案，就只是我弄得小嘗試而已。</p><script type="text/javascript" src="//cdn.datacamp.com/dcl-react.js.gz"></script><p>可以在這裡跑python</p><div data-datacamp-exercise data-lang="python">    <code data-type="sample-code">        a = 5 <br>        print(a)    </code></div><p>可以在這裡跑R</p><div data-datacamp-exercise data-lang="r">    <code data-type="sample-code">        a <- 5 <br>        print(a)    </code></div><p>編譯過程沒有在本地快速，需要幾秒啟動時間，但還算方便(?)</p>]]></content>
      
      
      <categories>
          
          <category> 專案 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jshell</title>
      <link href="/jshell/"/>
      <url>/jshell/</url>
      
        <content type="html"><![CDATA[<p>因為真的很好玩就開一篇來介紹 jshell 這個東西。</p><p>它位於”\bin”路徑之下，例如”C:\Program Files\Java\jdk-16.0.1\bin”資料夾當中，可以找到jshell.exe。</p><h2 id="jshell能夠做到什麼"><a href="#jshell能夠做到什麼" class="headerlink" title="jshell能夠做到什麼?"></a>jshell能夠做到什麼?</h2><p>這是一個 REPL(Read-Eval-Print Loop) 的交互式實時命令工具。</p><img src="/jshell/1.png" class=""><p>大概像是這樣，其實滿酷的。</p><span id="more"></span><p>官方文檔說 jshell 的功能是這樣。</p><p><strong>JShell helps you try out code and easily explore options as you develop your program. You can test individual statements, try out different variations of a method, and experiment with unfamiliar APIs within the JShell session. JShell doesn’t replace an IDE. As you develop your program, paste code into JShell to try it out, and then paste working code from JShell into your program editor or IDE.</strong></p><p>基本上就是可以把 code 在 JShell 中進行測試，測完再放入自己的程式當中。</p><p>另外可以透過 &#x2F;help 來查詢指令。</p><img src="/jshell/2.png" class=""><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>好啦，感覺我也不會用到這個功能，但是挖文檔挖到覺得很好玩，所以分享一下。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java邏輯回歸程式實作範例</title>
      <link href="/random-logistic-regression-code/"/>
      <url>/random-logistic-regression-code/</url>
      
        <content type="html"><![CDATA[<p>改寫自此python code，因為網路上流傳太多版本<del>大陸互相亂爬導致到處都有</del>，找不到出處故只附此code，若侵犯版權請盡速與我聯繫。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 這個是別人的啦!不是我寫的。</span></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sigmoid函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sigmoid</span>(<span class="params">inX</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span> / (<span class="number">1</span> + np.exp(-inX))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 梯度上升</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gradAscent</span>(<span class="params">dataMatIn, classLabels</span>):</span><br><span class="line">    dataMatrix = np.mat(dataMatIn)</span><br><span class="line">    labelMat = np.mat(classLabels).transpose()</span><br><span class="line">    m, n = dataMatrix.shape</span><br><span class="line">    alpha = <span class="number">0.01</span></span><br><span class="line">    maxCycles = <span class="number">500</span></span><br><span class="line">    weights = np.ones((n, <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(maxCycles):</span><br><span class="line">        h = sigmoid(dataMatrix * weights)</span><br><span class="line">        error = (labelMat - h)</span><br><span class="line">        weights = weights + alpha * dataMatrix.transpose() * error</span><br><span class="line">    <span class="keyword">return</span> weights</span><br></pre></td></tr></table></figure><p>下面是改寫後的 java code，按照註解來，使用上只要動到訓練和預測的部分就可以了。</p><p>效能比不上有照論文實作優化過的，但我覺得是很好的學習範例，畢竟邏輯回歸可以當分類和回歸用，可以都玩玩看啦，希望大家玩得開心也得到一些收穫。</p><span id="more"></span><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> afan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * author: Afan Chen</span></span><br><span class="line"><span class="comment"> * 機器學習算法:邏輯回歸</span></span><br><span class="line"><span class="comment"> * 損失函數:交叉熵</span></span><br><span class="line"><span class="comment"> * 激勵函數:sigmoid</span></span><br><span class="line"><span class="comment"> * 疊代算法:隨機梯度上升算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogisticRegression</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sigmoid函數</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num 權重與特徵的內積</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 事件發生機率</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">sigmoid</span><span class="params">(<span class="type">double</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.0</span> / (<span class="number">1</span> + Math.exp(-num));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 將訓練結果回傳</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> datas 資料</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inx 第幾筆資料</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> weights 權重</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 權重與特徵的內積</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">sumMatrixRowMutiWeight</span><span class="params">(<span class="type">double</span>[][] datas, <span class="type">int</span> inx, <span class="type">double</span>[] weights)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; datas.length; i++) &#123;</span><br><span class="line">            res += datas[inx][i] * weights[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 將該筆數據跑過一次得到新的權重後回傳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span>[] adjustWeights(<span class="type">double</span>[][] datas, <span class="type">int</span> inx, <span class="type">double</span>[] weights, <span class="type">double</span> alpha , <span class="type">double</span> error) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span>[] res = <span class="keyword">new</span> <span class="title class_">double</span>[weights.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; weights.length; i++) &#123;</span><br><span class="line">            res[i] = alpha * error * datas[inx][i] + weights[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 訓練模型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> datas 資料</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> labels 標籤</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span>[] stocGradAscentl(<span class="type">double</span>[][] datas, <span class="type">double</span>[] labels) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">double</span>[] res = <span class="keyword">new</span> <span class="title class_">double</span>[datas[<span class="number">0</span>].length];</span><br><span class="line"></span><br><span class="line">        Arrays.fill(res, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; datas.length; j++) &#123;</span><br><span class="line">                <span class="type">double</span> <span class="variable">alpha</span> <span class="operator">=</span> <span class="number">4</span> / (<span class="number">1.0</span> + j + i) + <span class="number">0.01</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">randIndex</span> <span class="operator">=</span> r.nextInt(datas.length);</span><br><span class="line">                <span class="type">double</span> <span class="variable">h</span> <span class="operator">=</span> sigmoid(sumMatrixRowMutiWeight(datas, randIndex, res));</span><br><span class="line">                <span class="type">double</span> error=labels[randIndex]-h;</span><br><span class="line">                res = adjustWeights(datas, randIndex, res, alpha,error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 訓練模型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> datas 資料</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> labels 標籤</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxIter 疊代次數，沒設終止條件等他跑完</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 特徵權重</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span>[] stocGradAscentl(<span class="type">double</span>[][] datas, <span class="type">double</span>[] labels, <span class="type">int</span> maxIter) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">double</span>[] res = <span class="keyword">new</span> <span class="title class_">double</span>[datas[<span class="number">0</span>].length];</span><br><span class="line"></span><br><span class="line">        Arrays.fill(res, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; maxIter; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; datas.length; j++) &#123;</span><br><span class="line">                <span class="type">double</span> <span class="variable">alpha</span> <span class="operator">=</span> <span class="number">4</span> / (<span class="number">1.0</span> + j + i) + <span class="number">0.01</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">randIndex</span> <span class="operator">=</span> r.nextInt(datas.length);</span><br><span class="line">                <span class="type">double</span> <span class="variable">h</span> <span class="operator">=</span> sigmoid(sumMatrixRowMutiWeight(datas, randIndex, res));</span><br><span class="line">                <span class="type">double</span> error=labels[randIndex]-h;</span><br><span class="line">                res = adjustWeights(datas, randIndex, res, alpha,error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 預測發生機率</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> feature 特徵值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> weights 權重</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 回傳機率</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">predictionProbability</span><span class="params">(<span class="type">double</span>[] feature, <span class="type">double</span>[] weights)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">prob</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; feature.length; i++) &#123;</span><br><span class="line">            prob += feature[i] * weights[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        prob = sigmoid(prob);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> prob;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 預測結果(哪種可能比較大</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> feature 特徵值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> weights 權重</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 回傳預測</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">prediction</span><span class="params">(<span class="type">double</span>[] feature, <span class="type">double</span>[] weights)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">prob</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; feature.length; i++) &#123;</span><br><span class="line">            prob += feature[i] * weights[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        prob = sigmoid(prob);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> prob&gt;=<span class="number">0.5</span>?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 機器學習 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JIT(Just In Time)，Java的即時編譯特性</title>
      <link href="/jit/"/>
      <url>/jit/</url>
      
        <content type="html"><![CDATA[<p>這篇文的動機是因為最近一直聽到別人勸告新手與其學 java 不如學 c ，原因是<strong>java速度很慢</strong>，這個理由我不太能接受，所以就寫一篇文章來說明為什麼 java 的速度其實跟 c、c++ 差不多，在特定情況下藉由 JIT 技術已經比 C 或 C++ 快了。</p><p>首先，我們要知道 java 的編譯過程。</p><p>java 和 c 的 compiler 滿不一樣的，java 不同於 c 直接 compile 成 CPU 的指令，他是產生**統一規格的 bytecode，在運行期間，JVM 才會 interpret bytecode，所以只需要 build 一份 bytecode 就可以在各平台上運行。</p><p>這樣的編譯流程帶來跨平台的好處之外，還有運行效能的缺點，所以在2000年左右，java開始研究 <a href="https://www.oracle.com/java/technologies/javase/javase-core-technologies-apis.html">HotSpot</a> 的核心技術。</p><p>這裡要先講一個滿常發生的程式特性，<strong>大部分的運行時間被運用在少數的程式碼上</strong>。</p><span id="more"></span><h3 id="JIT的在編譯階段的優化"><a href="#JIT的在編譯階段的優化" class="headerlink" title="JIT的在編譯階段的優化"></a>JIT的在編譯階段的優化</h3><p>hot spot 的意思是 bytecode 當中常被使用到的程式碼片段，JVM 在運行程式的時候，先分析和找出這些程式碼片段，接下來將這些程式碼片段做大範圍的最佳化、以及將程式碼 compile 成特定處理器的指令。</p><p>簡單來說，就是編譯器自動幫你重構被重複使用的程式碼來加速程式的效能。(題外話，Oracle 推薦大家用他的 JDK 的理由就是他自稱有很多的黑科技優化，但很遺憾我還是選擇 openJDK。)</p><p><img src="https://miro.medium.com/max/1094/1*N4ns2d0oFaoN3EalxVd-CQ.png"></p><p>這是一張 C 和 java 的效能比較圖，比較項目是大矩陣的運算耗時，詳情請看<a href="https://medium.com/swlh/a-performance-comparison-between-c-java-and-python-df3890545f6d">文章</a>。</p><p>C 語言在使用 GCC 編譯時，若未經過 <a href="https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html">-O2 and -O3 optimization</a>，速度其實不會比 java 快，當然這是因為GCC把這些黑科技優化鎖起來了的關係，java 的優勢我覺得還是在開發上面的便利和生態系，所謂的 java 比 c 或 c++ 快的論點我覺得都是在特定情況下的吹捧。</p><p>但是還是希望大家能夠有一個概念，<strong>現代的 java 速度跟 c 的差異其實沒有大家想像的大</strong>。</p><p><img src="https://cdn.discordapp.com/attachments/756159774231494706/840847434791124992/image0.png"></p><p>程式語言效能圖，強者我朋友mes在golang教學中載的圖忘記來源。</p><p>(由於程式碼寫法的問題，不一定所有的 source code 被編譯的時候都會被優化，有的更可能造成執行速度變慢)</p><h3 id="JIT的在執行階段的優化"><a href="#JIT的在執行階段的優化" class="headerlink" title="JIT的在執行階段的優化"></a>JIT的在執行階段的優化</h3><p>如果有一段組合語言在程式碼當中出現了1000次，直譯器(interpreter) 會重複組譯1000次同樣的機器語言，JIT 會將這段機器語言先保留在快取記憶體內，每當遇到的時後就直接拿這段機器語言來執行，不用再組譯999次。</p><h3 id="JIT的編譯情形"><a href="#JIT的編譯情形" class="headerlink" title="JIT的編譯情形"></a>JIT的編譯情形</h3><p><img src="https://img-blog.csdnimg.cn/20190211113255885.png"></p><p>此外，為了降低 JIT 對編譯造成的負擔，JIT目前僅針對迴圈等會重複出現的程式碼做優化的動作。</p><h3 id="JIT的技術支持"><a href="#JIT的技術支持" class="headerlink" title="JIT的技術支持"></a>JIT的技術支持</h3><p>JIT 很大一部分建立於 java 的 garbage collection 之上，若想要更進一步的了解可以參閱<a href="https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/gc01/index.html">官方說明</a>。</p><h3 id="安全問題"><a href="#安全問題" class="headerlink" title="安全問題"></a>安全問題</h3><p>JIT 編譯的實現包括將 source code 或 byte code 編譯為機器代碼並執行。通常這是直接在內存中完成的 -JIT 編譯器將機器代碼直接輸出到內存中並立即執行，而不是將其輸出到硬碟上。</p><p>然後像大部分的預編譯一樣，將程式碼作為單獨的程序調用。在現代體系結構中，由於 Executable space protection (可執行空間)的保護，這會帶來一個問題–無法執行任意記憶體，否則會存在潛在的安全漏洞。</p><p>因此，必須將記憶體先標記為可執行。出於安全原因，應在將代碼寫入內存並標記為只讀之後執行此操作。</p><p>JIT Spraying 是一類計算機安全漏洞利用，它使用 JIT compilation for heap spraying，然後生成的記憶體是可執行的，如果可以將執行轉移到 heap 當中，就可以利用該漏洞。</p><h3 id="afan閒聊"><a href="#afan閒聊" class="headerlink" title="afan閒聊"></a>afan閒聊</h3><p><a href="https://afan0918.github.io/java/java16/">java 16</a> 優化了他的 garbage collection 功能，利用平行處理把垃圾回收機制的運行壓在 1ms (毫秒)之內，又更快了。</p><p>話說在去年底，PHP 8.0 也引入了 JIT，雖然PHP是世界上最好的語言梗一直被玩，但好像真的有在不斷改進與進化。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java16的新特性</title>
      <link href="/java-16/"/>
      <url>/java-16/</url>
      
        <content type="html"><![CDATA[<p>雖然好像慢了，但還是小小來記錄一下java 16到底有什麼具體的改變，方便我跟版本，畢竟9月就要發布java 17(LTS,長期穩定支援版本)了，總不能一直抱著祖傳java 8。</p><p>我就挑我覺得比較酷的來說，因為網路上的內容基本上都講得滿模糊的，所以乾脆直接看oracle的java document，再加入我自己的一點理解。</p><h2 id="Record-Classes"><a href="#Record-Classes" class="headerlink" title="Record Classes"></a>Record Classes</h2><p>Record Classes的官方預設用途是被拿來實作簡單的”數據載體”的，基本上就是一個我覺得還算好用的語法糖。</p><span id="more"></span><p>具體功能大概是這樣。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">record</span> <span class="title class_">Rectangle</span><span class="params">(<span class="type">double</span> length, <span class="type">double</span> width)</span> &#123; &#125;</span><br></pre></td></tr></table></figure><p>開發者寫的這一段code等效於以下的程式碼。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">double</span> length;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">double</span> width;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(<span class="type">double</span> length, <span class="type">double</span> width)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.length = length;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> <span class="title function_">length</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="built_in">this</span>.length; &#125;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">width</span><span class="params">()</span>  &#123; <span class="keyword">return</span> <span class="built_in">this</span>.width; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Implementation of equals() and hashCode(), which specify</span></span><br><span class="line">    <span class="comment">// that two record objects are equal if they</span></span><br><span class="line">    <span class="comment">// are of the same type and contain equal field values.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> equals...</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> hashCode...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// An implementation of toString() that returns a string</span></span><br><span class="line">    <span class="comment">// representation of all the record class&#x27;s fields,</span></span><br><span class="line">    <span class="comment">// including their names.</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以從上面看到輸入的數據會被<strong>寫死在class創建的時候</strong>，並且自動生成equals，hashCode和toString function，我覺得不算驚艷，但還不錯，可以快速的來處理簡單得數據資料。</p><p>來講一下equals()跟hashCode()的用途，在java當中，&#x3D;&#x3D;運算子比較的是物件實體或者說是記憶體位置是否相同，而equals()可以比較物件的值是否相同。</p><p>hashCode()則是會回傳一個將過hash函數處裡的int值，可以被用來做HashMap、HashSet等雜湊資料結構的索引，讓使用者可以以hashCode()快速實現相關結構。</p><p>另外不能宣告instance variables(non-static fields)或者是instance initializers。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">record</span> <span class="title class_">Rectangle</span><span class="params">(<span class="type">double</span> length, <span class="type">double</span> width)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Field declarations must be static:</span></span><br><span class="line">    BiFunction&lt;Double, Double, Double&gt; diagonal;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Instance initializers are not allowed in records:</span></span><br><span class="line">    &#123;</span><br><span class="line">        diagonal = (x, y) -&gt; Math.sqrt(x*x + y*y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>類似這樣的code將不會被編譯。</p><p>但可以在Record Classes當中聲明instance methods，像是以下程式碼。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">record</span> <span class="title class_">Rectangle</span><span class="params">(<span class="type">double</span> length, <span class="type">double</span> width)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Nested record class</span></span><br><span class="line">    <span class="keyword">record</span> <span class="title class_">RotationAngle</span><span class="params">(<span class="type">double</span> angle)</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> RotationAngle &#123;</span><br><span class="line">            angle = Math.toRadians(angle);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Public instance method</span></span><br><span class="line">    <span class="keyword">public</span> Rectangle <span class="title function_">getRotatedRectangleBoundingBox</span><span class="params">(<span class="type">double</span> angle)</span> &#123;</span><br><span class="line">        <span class="type">RotationAngle</span> <span class="variable">ra</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RotationAngle</span>(angle);</span><br><span class="line">        <span class="type">double</span> <span class="variable">x</span> <span class="operator">=</span> Math.abs(length * Math.cos(ra.angle())) +</span><br><span class="line">                   Math.abs(width * Math.sin(ra.angle()));</span><br><span class="line">        <span class="type">double</span> <span class="variable">y</span> <span class="operator">=</span> Math.abs(length * Math.sin(ra.angle())) +</span><br><span class="line">                   Math.abs(width * Math.cos(ra.angle()));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Rectangle</span>(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Pattern-Matching-for-instanceof"><a href="#Pattern-Matching-for-instanceof" class="headerlink" title="Pattern Matching for instanceof"></a>Pattern Matching for instanceof</h2><p>instanceof是java當中的保留關鍵字，用於確認變數型態，當相同時就返回true，不同就返回false。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(d <span class="keyword">instanceof</span> Double)&#123;<span class="comment">//true</span></span><br><span class="line">    <span class="comment">//做某件事情</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(d <span class="keyword">instanceof</span> Boolean)&#123;<span class="comment">//false</span></span><br><span class="line">    <span class="comment">//做某件事情</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大概就會像是這個樣子，可以降低程式的bug還有一些implements的子class分類會很好弄，像是以下這樣。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">getPerimeter</span><span class="params">(Shape shape)</span> <span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line">        <span class="keyword">if</span> (shape <span class="keyword">instanceof</span> Rectangle) &#123;</span><br><span class="line">            <span class="type">Rectangle</span> <span class="variable">r</span> <span class="operator">=</span> (Rectangle) shape;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span> * r.length() + <span class="number">2</span> * r.width();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shape <span class="keyword">instanceof</span> Circle) &#123;</span><br><span class="line">            <span class="type">Circle</span> <span class="variable">c</span> <span class="operator">=</span> (Circle) shape;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span> * c.radius() * Math.PI;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unrecognized shape&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">double</span> length;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">double</span> width;    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(<span class="type">double</span> length, <span class="type">double</span> width)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.length = length;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="type">double</span> <span class="title function_">length</span><span class="params">()</span> &#123; <span class="keyword">return</span> length; &#125;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">width</span><span class="params">()</span> &#123; <span class="keyword">return</span> width; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">double</span> radius;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="type">double</span> <span class="title function_">radius</span><span class="params">()</span> &#123; <span class="keyword">return</span> radius; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在java 16當中，有新的語法糖來簡化這個過程。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">getPerimeter</span><span class="params">(Shape shape)</span><span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line">    <span class="keyword">if</span> (shape <span class="keyword">instanceof</span> Rectangle r) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * r.length() + <span class="number">2</span> * r.width();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shape <span class="keyword">instanceof</span> Circle c) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * c.radius() * Math.PI;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentExceptio</span>(<span class="string">&quot;Unrecognized shape&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大概就是可以宣告一個變數並等同於shape以便後續使用。</p><h2 id="Switch-Expressions"><a href="#Switch-Expressions" class="headerlink" title="Switch Expressions"></a>Switch Expressions</h2><p>Switch Expressions應該是我最喜歡的部分，他把switch弄得酷酷的。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Day</span> &#123; SUNDAY, MONDAY, TUESDAY,</span><br><span class="line">    WEDNESDAY, THURSDAY, FRIDAY, SATURDAY; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">numLetters</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">Day</span> <span class="variable">day</span> <span class="operator">=</span> Day.WEDNESDAY;</span><br><span class="line">    <span class="keyword">switch</span> (day) &#123;</span><br><span class="line">        <span class="keyword">case</span> MONDAY:</span><br><span class="line">        <span class="keyword">case</span> FRIDAY:</span><br><span class="line">        <span class="keyword">case</span> SUNDAY:</span><br><span class="line">            numLetters = <span class="number">6</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TUESDAY:</span><br><span class="line">            numLetters = <span class="number">7</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> THURSDAY:</span><br><span class="line">        <span class="keyword">case</span> SATURDAY:</span><br><span class="line">            numLetters = <span class="number">8</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> WEDNESDAY:</span><br><span class="line">            numLetters = <span class="number">9</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Invalid day: &quot;</span> + day);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(numLetters);</span><br></pre></td></tr></table></figure><p>在java 16中把這種又長又冗的寫法改為以下這種，有夠香的啦!我前陣子寫計算機概論的作業的時候用的滿開心的。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Day</span> <span class="variable">day</span> <span class="operator">=</span> Day.WEDNESDAY;    </span><br><span class="line">System.out.println(</span><br><span class="line">    <span class="keyword">switch</span> (day) &#123;</span><br><span class="line">        <span class="keyword">case</span> MONDAY, FRIDAY, SUNDAY -&gt; <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">case</span> TUESDAY                -&gt; <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">case</span> THURSDAY, SATURDAY     -&gt; <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">case</span> WEDNESDAY              -&gt; <span class="number">9</span>;</span><br><span class="line">        <span class="keyword">default</span> -&gt; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Invalid day: &quot;</span> + day);</span><br><span class="line">    &#125;</span><br><span class="line">);    </span><br></pre></td></tr></table></figure><p>而如果要寫更多(不只一行)操作的話，可以用{}把內容括號起來執行，例如以下。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">numLetters</span> <span class="operator">=</span> <span class="keyword">switch</span> (day) &#123;</span><br><span class="line">    <span class="keyword">case</span> MONDAY, FRIDAY, SUNDAY -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="number">6</span>);</span><br><span class="line">        yield <span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> TUESDAY -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="number">7</span>);</span><br><span class="line">        yield <span class="number">7</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> THURSDAY, SATURDAY -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="number">8</span>);</span><br><span class="line">        yield <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> WEDNESDAY -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="number">9</span>);</span><br><span class="line">        yield <span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span> -&gt; &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Invalid day: &quot;</span> + day);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;  </span><br></pre></td></tr></table></figure><h2 id="封裝與其他部分"><a href="#封裝與其他部分" class="headerlink" title="封裝與其他部分"></a>封裝與其他部分</h2><p>因為涉及到程式編寫層面較少，所以我把我覺得比較重要的改變拉出來集合成一個分類。</p><h3 id="完整功能"><a href="#完整功能" class="headerlink" title="完整功能"></a>完整功能</h3><ul><li><p>java 16封裝了除了關鍵的內部API以外的所有內部方法，JDK默認為拒絕所有的非必要訪問，除非使用–add-opens打開特定套件。</p></li><li><p>優化ZGC(java內部提供的垃圾記憶體回收機制)，以多執行續處理，極大的降低延遲。</p></li><li><p>可以將未使用的HotSpot VM metaspace 記憶體更快速的回傳給操作系統。</p></li></ul><h3 id="正在開發的項目和preview功能"><a href="#正在開發的項目和preview功能" class="headerlink" title="正在開發的項目和preview功能"></a>正在開發的項目和preview功能</h3><ul><li><p>Vector API : 在CPU架構上對向量運算做出優化，提供更高的性能。</p></li><li><p>Foreign Linker API : 把原本用來呼叫其他程式語言的JNI取代掉，該API提供靜態類型的純Java訪問，感覺比應該不會比JNI難用(?)，我快受夠JNI了。</p></li><li><p>Sealed Classes : 可以限制那些class or interfaces可以extend or implement Sealed Classes和可以限制use of a superclass，目前還在預覽階段，但感覺是想未來逐漸取代掉class。</p></li></ul><h3 id="JDK內部改變"><a href="#JDK內部改變" class="headerlink" title="JDK內部改變"></a>JDK內部改變</h3><ul><li>JDK 原程式碼開始使用C++ 14</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
